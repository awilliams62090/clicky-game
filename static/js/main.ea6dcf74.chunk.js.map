{"version":3,"sources":["components/Container/index.js","components/Img/index.js","components/Header/index.js","components/Footer/index.js","components/Score/index.js","components/Nav/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","react_default","a","createElement","className","children","Image","url","id","alt","clicked","shuffle","src","onClick","handleClick","Header","reactstrap_es","fluid","Footer","href","target","rel","class","Score","state","message","switchMessage","_this","prevProps","newState","score","topScore","this","setState","Component","Nav","components_Score","App","characters","game","i","length","j","Math","floor","random","_ref","console","log","reset","resetGame","map","item","Object","objectSpread","correctClick","newData","newScore","newTopScore","max","data","newGame","imageClick","click","image","_this2","components_Nav","components_Header","components_Container","Img","key","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea6dcf74.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./container.css\";\r\n\r\nconst Container = props => {\r\nreturn (\r\n<div className=\"container\">{props.children}</div>\r\n)\r\n};\r\n\r\nexport default Container;","import React from \"react\";\r\nimport \"./img.css\";\r\n\r\n// not much will change about these change about these images so we will have\r\n// them set up as statelss\r\n\r\nconst Image = props => {\r\n    const {url, id, alt, clicked, shuffle} = props\r\n    return (\r\n        <div className=\"images\">\r\n            <img src={url} alt={alt} onClick={() => props.handleClick(id)}></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Image","import React from 'react';\r\nimport { Jumbotron, Container } from 'reactstrap';\r\nimport \"./jumbotron.css\"\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div className=\"Jumbotron\">\r\n      <Jumbotron fluid>\r\n        <Container fluid>\r\n          <h5> Click as many Toy Story Characters as you can without clicking on the same one more than once! </h5>\r\n        </Container>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./footer.css\"\r\n\r\nconst Footer = () => (\r\n\r\n    <footer className=\"footer\">\r\n        <div>\r\n            <ul id=\"footerSpan\">\r\n                <li>\r\n                    <span>\r\n                        <a\r\n                            href=\"https://github.com/awilliams62090/\"\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                            class=\"footer\">\r\n                            <img src=\"assets/images/GitHub-Mark-Dark-32px.png\" alt=\"github\"/>\r\n                        </a>\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        <a\r\n                            href=\"https://www.linkedin.com/in/alyssa-williams-63bbb676/\"\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                            class=\"footer\">\r\n                            Â© 2018 Alyssa Williams</a>\r\n                    </span>\r\n                </li>\r\n\r\n            </ul>\r\n        </div>\r\n    </footer>\r\n)\r\n\r\nexport default Footer;","import React, {Component} from \"react\";\r\nimport \"./score.css\";\r\n\r\nclass Score extends Component {\r\n    state = {\r\n        message: \"\"\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        let newState={\r\n            message: \"\"\r\n        };\r\n        const {score, topScore} = prevProps\r\n        if (score === 0 && topScore === 0) {\r\n            newState.message = \"\";\r\n        } else if (score !== 0 && topScore > 0) {\r\n            newState.message = \"correct\";\r\n        } else {\r\n            newState.message = \"incorrect\";\r\n        };\r\n\r\n        if (score !== this.props.score || this.state.message !== newState.message) {\r\n            this.setState(newState);\r\n        };\r\n    };\r\n\r\n    switchMessage = () => {\r\n        switch (this.state.message) {\r\n        case \"correct\":\r\n          return \"You guessed correctly!\";\r\n        case \"incorrect\":\r\n          return \"You guessed incorrectly!\";\r\n        default:\r\n          return \"Click a character to begin!\";\r\n        }\r\n    };\r\n\r\n    render(){\r\n        return(\r\n            <li>\r\n                {this.switchMessage()}\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Score;","import React from \"react\";\r\nimport \"./nav.css\";\r\nimport Score from \"../Score\";\r\n\r\nconst Nav = props => (\r\n\r\n    <div className=\"nav\">\r\n    <ul>\r\n        <li><h3>Woody's Roundup Memory Game!</h3></li>\r\n        <Score score={props.score} topScore={props.topScore}/>\r\n        <li id=\"score\"> Score: {props.score} | Top Score: {props.topScore}</li>\r\n    </ul>\r\n    </div>\r\n);\r\n\r\nexport default Nav;","import React, {Component} from 'react';\nimport characters from './characters'\nimport Container from \"./components/Container/\";\nimport Image from './components/Img/';\nimport Header from \"./components/Header/\";\nimport Footer from \"./components/Footer/\";\nimport Nav from \"./components/Nav/\";\n\nclass App extends Component {\n    state = {\n        score: 0,\n        topScore: 0,\n        characters\n    }\n\n    // componentDidMount() {     this.setState({         characters:\n    // this.shuffle(this.state.characters)     }) };\n\n    shuffle = () => {\n        let {game} = this.state;\n        for (let i = characters.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [characters[i], characters[j]] = [characters[j], characters[i]];\n        }\n        this.setState({game});\n        console.log(characters);\n    };\n\n    //resets all clicked properties to false\n    reset = () => {\n        const resetGame = characters.map(item => ({\n            ...item,\n            clicked: false\n        }));\n        return this.shuffle(resetGame);\n    };\n\n    //update score and replace top score if score is greater than current topScore\n    correctClick = newData => {\n        let newScore = this.state.score;\n        newScore++;\n        let newTopScore = Math.max(newScore, this.state.topScore);\n        this.setState({\n            data: this.shuffle(newData),\n            score: newScore,\n            topScore: newTopScore\n        })\n    }\n\n    //restarts game and sets score back to 0\n    newGame = newData => {\n        this.setState({\n            data: this.reset(newData),\n            score: 0\n        })\n    }\n\n    // checking the clicked property of the image. If it has been clicked, reset\n    // game. If it hasn't, update clicked to true\n    imageClick = id => {\n        let click = false;\n        const newData = this\n            .state\n            .characters\n            .map(image => {\n                if (image.id === id) {\n                    if (!image.clicked) {\n                        image.clicked = true;\n                        click = true;\n                    }\n                }\n                return image;\n            });\n        click ? this.correctClick(newData): this.newGame(newData);\n    }\n    render() {\n        // let {characters} = this.state;\n        return (\n            <div>\n                <Nav score={this.state.score} topScore={this.state.topScore}/>\n                <Header message={this.state.message}/>\n                <Container>\n                    <div className=\"row\">\n                        {this.state.characters.map(image => (<Image\n                                url={image.url}\n                                id={image.id}\n                                key={image.id}\n                                clicked={image.clicked}\n                                handleClick={this.imageClick}/>))}\n                    </div>\n                </Container>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}